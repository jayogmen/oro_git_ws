name: OTA Component Update Deployment

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'package.xml'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'package.xml'

env:
  DEPLOY_API_URL: "http://13.232.234.162:5000/api"
  UPDATE_TYPE: "component-update"
  COMPONENT_NAME: "oro_git_ws"
  GITHUB_REPO: "https://github.com/jayogmen/oro_git_ws.git"

permissions:
  contents: write

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Validate repository structure
        run: |
          for dir in "src" ; do
            if [ ! -d "$dir" ]; then
              echo "Required directory '$dir' is missing"
              exit 1
            fi
          done

  version:
    needs: validate
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.bump_version.outputs.new_version }}
      commit_hash: ${{ steps.get_commit.outputs.commit_hash }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get commit hash
        id: get_commit
        run: |
          COMMIT_HASH=$(git rev-parse HEAD)
          echo "commit_hash=$COMMIT_HASH" >> $GITHUB_OUTPUT

      - name: Get latest version
        id: get_latest_version
        run: |
          LATEST_TAG=$(git tag -l "v*" | sort -V | tail -n 1)
          if [ -z "$LATEST_TAG" ]; then
            echo "current_version=0.1.0" >> $GITHUB_OUTPUT
          else
            echo "current_version=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
          fi

      - name: Bump version
        id: bump_version
        run: |
          CURRENT_VERSION=${{ steps.get_latest_version.outputs.current_version }}
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          if [ "${{ github.event_name }}" = "push" ]; then
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
            git push origin "v$NEW_VERSION"
          fi

  deploy:
    needs: [version]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Create deployment package
        run: |
          cat > metadata.json << EOL
          {
            "buildTime": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "gitCommit": "${{ needs.version.outputs.commit_hash }}",
            "branch": "main",
            "workflow": "component-update",
            "version": "${{ needs.version.outputs.new_version }}"
          }
          EOL

      - name: Deploy to OTA server
        run: |
          PAYLOAD='{
            "projectName": "ota_update",
            "artifactId": "${{ env.COMPONENT_NAME }}",
            "version": "${{ needs.version.outputs.new_version }}",
            "url": "${{ env.GITHUB_REPO }}",
            "updateType": "${{ env.UPDATE_TYPE }}",
            "metadata": '"$(cat metadata.json)"'
          }'
          
          RESPONSE=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            -w "\n%{http_code}" \
            ${{ env.DEPLOY_API_URL }}/saveArtifact)
          
          HTTP_STATUS=$(echo "$RESPONSE" | tail -n 1)
          RESPONSE_BODY=$(echo "$RESPONSE" | head -n -1)
          
          if [ "$HTTP_STATUS" != "200" ]; then
            echo "Deployment failed with status: $HTTP_STATUS"
            echo "Response: $RESPONSE_BODY"
            exit 1
          fi